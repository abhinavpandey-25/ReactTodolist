{"version":3,"sources":["components/Navbar.js","components/About.js","components/Home.js","components/Docs.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","className","style","backgroundColor","href","id","to","About","React","Component","Home","state","text","input","_id","wish","fetch","then","res","json","result","setState","this","fetchdata","e","console","log","event","preventDefault","item","URLSearchParams","FormData","target","pair","append","res2","value","list","map","val","dbid","toString","key","onClick","handleDelete","onSubmit","handlesubmit","type","autoComplete","name","onChange","Docs","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6RAsBeA,mBApBf,SAAgBC,GAGZ,OACI,6BACA,yBAAKC,UAAU,cAAcC,MAAO,CAACC,gBAAgB,QACnD,uBAAGC,KAAK,IAAIH,UAAU,cAAtB,QACA,wBAAII,GAAG,aAAaJ,UAAU,UAC5B,4BAAI,kBAAC,IAAD,CAAMK,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,SAAT,eCFGC,E,qKARRP,GACL,OACE,yBAAKC,UAAU,UACb,2D,GAJUO,IAAMC,W,gBCuFTC,G,kNArFfC,MAAM,CACJC,KAAK,GACLC,MAAM,CAAC,CAACC,IAAI,EAAEC,KAAK,gB,0DAET,IAAD,OACTC,MAAM,SAASC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UAAQF,MAAK,SAAAG,GAExC,EAAKC,SAAS,CAACR,MAAMO,S,0CAKvBE,KAAKC,c,mCAEIC,GACXC,QAAQC,IAAIF,GAEZR,MAAM,eAAeQ,EAAE,CACrB,OAAS,WACRP,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UAChBF,MAAK,SAAAG,GACJK,QAAQC,IAAIN,MAMbE,KAAKC,c,mCAIOI,GAAO,IAAD,OACjBA,EAAMC,iBAGN,IAJiB,EAIbC,EAAK,IAAIC,gBAJI,cAMC,IAAIC,SAASJ,EAAMK,SANpB,IAMjB,IAAI,EAAJ,qBAA6C,CAAC,IAApCC,EAAmC,QAG3CJ,EAAKK,OAAOD,EAAK,GAAGA,EAAK,KATV,8BAqBjBjB,MAAM,QAAQ,CACb,OAAS,OACR,KAAOa,IACPZ,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UAAQF,MAAK,SAAAkB,GACzB,EAAKd,SAAS,CACdR,MAAM,GAAD,mBAAK,EAAKF,MAAME,OAAhB,CAAsBsB,SAMjCR,EAAMK,OAAOI,MAAM,GACnBd,KAAKD,SAAS,CAACT,KAAK,O,6BAEXZ,GAAO,IAAD,OACLqC,EAAKf,KAAKX,MAAME,MAAMyB,KAAK,SAAAC,GAAO,OACtC,yBAAMC,KAAMD,EAAIzB,IAAI2B,WAAYC,IAAKH,EAAIzB,IAAK6B,QAAS,SAACnB,GAAD,OAAK,EAAKoB,aAAaL,EAAIzB,MAAMb,UAAU,SAASsC,EAAIxB,SACjH,OACA,6BACA,0BAAM8B,SAAU,SAACrB,GAAK,EAAKsB,aAAatB,KACtC,uBAAGnB,GAAG,QAAN,gCACA,2BAAO0C,KAAK,OAAOC,aAAa,MAAM3C,GAAG,UAAW4C,KAAK,OAAOb,MAAOd,KAAKX,MAAMC,KAAMsC,SAAU,SAAC1B,GAAK,EAAKH,SAAS,CAACT,KAAKY,EAAEQ,OAAOI,WACrI,4BAAQnC,UAAU,gCAAlB,WAEF,yBAAKA,UAAU,cAClB,yBAAKA,UAAU,WACXoC,S,GA/EY7B,IAAMC,YCcR0C,E,qKAdNnD,GAML,OAEA,6BACE,iE,GAVWQ,IAAMC,WC2BV2C,G,4KAfNpD,GACL,OACJ,kBAAC,IAAD,KACA,yBAAKC,UAAU,OACT,kBAAC,EAAD,MACA,wBAAII,GAAG,WAAP,aAED,kBAAC,IAAD,CAAOgD,OAAK,EAACC,KAAK,IAAIC,UAAW7C,IAChC,kBAAC,IAAD,CAAQ4C,KAAK,SAASC,UAAWhD,IAChC,kBAAC,IAAD,CAAO+C,KAAK,QAAOC,UAAWJ,U,GAVnB3C,IAAMC,YCAJ+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.8363ab45.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link,withRouter} from 'react-router-dom'\r\nfunction Navbar(props){\r\n   // since we warpped with withrouter so we can have history through which we can\r\n   //navigate to any route access otherwise not console.log(props);\r\n    return(\r\n        <nav>\r\n        <div className=\"nav-wrapper\" style={{backgroundColor:\"red\"}}>\r\n          <a href=\"#\" className=\"brand-logo\">Logo</a>\r\n          <ul id=\"nav-mobile\" className=\"right \">\r\n            <li><Link to=\"/\">Home</Link></li>\r\n            <li><Link to=\"/about\">About</Link></li>\r\n            <li><Link to=\"/docs\">Docs</Link></li>\r\n           \r\n           </ul>\r\n        </div>\r\n      </nav>\r\n\r\n    )\r\n}\r\n\r\n//wrapping navbar with withRouter help in providng hitory props to navbar so that we can move to any page we want \r\nexport default withRouter(Navbar);","import React from 'react'\r\nclass About extends React.Component{\r\n    render(props){\r\n      return(\r\n        <div className=\"coding\" >\r\n          <h1>hi i am Code component</h1>\r\n        </div>  \r\n      )\r\n    }  \r\n    }\r\n    export default About;","import { json, text } from 'body-parser';\r\nimport React from 'react'\r\nclass Home extends React.Component{\r\n  state={\r\n    text:'',\r\n    input:[{_id:1,wish:'...loading'}]\r\n  }\r\n  fetchdata(){\r\n    fetch('/data').then(res=>res.json()).then(result=>{\r\n      //console.log(result);\r\n      this.setState({input:result})\r\n    });\r\n  }\r\ncomponentDidMount(){\r\n  //console.log(\"mounted\");\r\n    this.fetchdata();\r\n}\r\nhandleDelete(e){\r\n  console.log(e);\r\n  \r\n  fetch('/removedata/'+e,{\r\n    'method':'delete'\r\n  }).then(res=>res.json())\r\n  .then(result=>{\r\n    console.log(result);\r\n    // const newinput=this.state.input.filter((item)=>{\r\n    //   return( result._id!==item._id);\r\n   // })\r\n   //this.setState({input:newinput})\r\n    });  \r\n   this.fetchdata();\r\n  //2 ways we have to re render dom after deletion 1 is to agian call the gete method or the other could be \r\n  //since we have id of data which we deleted so use filter\r\n  }\r\n  handlesubmit(event){\r\n    event.preventDefault();\r\n    //console.log(event.target);\r\n    //will give the whole form\r\n    var item=new URLSearchParams();\r\n    //so we use the Url search pattern in the form of key value  ppair\r\n    for(const pair of new FormData(event.target)){\r\n      // console.log(pair);\r\n      //will get eveey pair of name value new form data(from form)\r\n      item.append(pair[0],pair[1]);\r\n    } \r\n  //   const listitem={\r\n  //     item:document.getElementsByName(\"item\")\r\n  //   }\r\n\r\n  //we will get the cors error if we have frontend and backend at different server hame server  ko batana pdta ki usko kiski\r\n  //request accept karna h uske alwa ki req kre toh ie a violation of CORS policy kyki meri frontend se request to facebook\r\n  //will be rejected unless facebook server allows me\r\n\r\n  //can be solved using two way ya m fetch m server ka adres daldu aur uske bad server par cors policy violate krdu but \r\n  //that is not good at production  leevel.\r\n    fetch('/sent',{\r\n     'method':\"POST\",\r\n      'body':item,\r\n   }).then(res=>res.json()).then(res2=>{\r\n        this.setState({\r\n        input:[...this.state.input,res2]\r\n   })\r\n  //here u cannot use the below statement as it wouudl push the item but the dom willl not get rendered.\r\n  //  this.state.input.push(res2);\r\n  //  console.log(this.state.input);\r\n  });\r\n  event.target.value=\"\";\r\n  this.setState({text:\"\"});\r\n  }\r\n    render(props){\r\n      const list=this.state.input.map( val=>{ return (\r\n        <div  dbid={val._id.toString()} key={val._id} onClick={(e)=>this.handleDelete(val._id)} className=\"item \">{val.wish}</div>)})      \r\n      return(\r\n      <div>\r\n      <form onSubmit={(e)=>{this.handlesubmit(e)}}>\r\n        <p id=\"para\" >Click on the Items to delete</p>\r\n        <input type=\"text\" autoComplete=\"off\" id=\"content\"  name=\"item\" value={this.state.text} onChange={(e)=>{this.setState({text:e.target.value})}}></input>\r\n        <button className=\"waves-effect waves-light btn\">Submit</button>\r\n      </form>\r\n      <div className=\"collection\">\r\n   <div className=\"central\">\r\n      {list}\r\n   </div>\r\n      </div>\r\n       </div>\r\n       )\r\n    }\r\n  }\r\n  export default Home;","import React from 'react'\r\nclass Docs extends React.Component{\r\n    render(props){\r\n      // setTimeout(()=>{\r\n      //   this.props.history.push('/about');\r\n      //   //used to change the route dynamically \r\n      // },3000);\r\n      // console.log(this.props);\r\n      return(\r\n  \r\n      <div>\r\n        <h1>HI there i am Docs Component</h1>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  export default Docs;","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar'\nimport { render } from 'react-dom';\nimport About from './components/About'\nimport Home from './components/Home'\nimport Docs from './components/Docs'\nimport axios from 'axios';\nimport {BrowserRouter,Route}from 'react-router-dom';\n\n\n\nclass App extends React.Component {\n  render(props){\n    return (\n<BrowserRouter>\n<div className=\"App\">\n      <Navbar/>\n      <h1 id=\"heading\">ITEM-LIST</h1>\n      {/* navlink bnate time we specify the link and route se ham bta dete ki is route p konsa component render karna h */}\n     <Route exact path=\"/\" component={Home}/>\n      <Route  path=\"/about\" component={About}/>\n       <Route path=\"/docs\"component={Docs}/>\n        </div>\n        </BrowserRouter>\n        );\n         }\n      }\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}